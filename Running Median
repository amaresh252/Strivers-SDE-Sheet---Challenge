#include<bits/stdc++.h>

int callfun(int a,int b){
    if(a==b) return 1;
    if(a<b) return 2;
    return 3;
}

int Median(int ele,priority_queue<int> &q1,priority_queue<int,vector<int>,greater<int>> &q2,int &median){
    
    switch(callfun(q1.size(),q2.size())){
        case 1: if(ele>median){
            q2.push(ele);
            return median=q2.top();
        }
        else{
            q1.push(ele);
          return  median=q1.top();
        }
        break;
        case 2: if(ele>median){
            q1.push(q2.top());
            q2.pop();
            q2.push(ele);
            return median=(q1.top()+q2.top())/2;
        }
        else{
            q1.push(ele);
            return median=(q1.top()+q2.top())/2;
        }
        break;
        case 3:  if(ele<=median){
            q2.push(q1.top());
            q1.pop();
            q1.push(ele);
            return median=(q1.top()+q2.top())/2;
        }
        else{
            q2.push(ele);
            return median=(q1.top()+q2.top())/2;
        }
        break;
    }
}
void findMedian(int *arr, int n)
{  
   priority_queue<int> q1;
   priority_queue<int,vector<int>,greater<int>> q2;
   int median=-1;
    for(int i=0;i<n;i++){
        cout<<Median(arr[i],q1,q2,median)<<" ";
    }
}
