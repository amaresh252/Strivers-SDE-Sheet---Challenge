#include<bits/stdc++.h>
 
 struct Node{
     Node *list[2];
     bool iscontain(int i){
         return (list[i]!=NULL);
     }
     void put(int i,Node *node){
         list[i]=node;
     }
     Node* get(int i){
         return list[i];
     }
 };

class Trie {
    Node  *root;
 public:
    Trie(){
        root=new Node();
    }

    void insert(int num){
        Node *node=root;
        for(int i=31;i>=0;i--){
            int bit=(num>>i) & 1;
           if(!node->iscontain(bit)){
               node->put(bit,new Node());
           }
           node=node->get(bit);
        }
    }
    int getmax(int num){
        Node *node=root;
        int maxi=0;
        for(int i=31;i>=0;i--){
           int bit=(num>>i) & 1;
            if(node->iscontain(1-bit)){
                maxi=maxi | (1<<i);
                node=node->get(1-bit);
            }
            else {
                node=node->get(bit);
            }
        }
        return  maxi;
    }

};

int maximumXor(vector<int> A)
{
      int maxi=0;
      Trie trie;
      for(int i=0;i<A.size();i++){
          trie.insert(A[i]);
      }
     for(int i=0;i<A.size();i++){
          maxi=max(maxi,trie.getmax(A[i]));
      }
      return maxi;
}
