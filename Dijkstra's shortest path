#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
   vector<int> dist(vertices,INT_MAX);
   priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
   vector<pair<int,int>> adj[vertices];
    for(auto i:vec){
         adj[i[0]].push_back({i[1],i[2]});
         adj[i[1]].push_back({i[0],i[2]});   
   }
   dist[source]=0;
   pq.push({0,source});
   while(!pq.empty()){
      int node=pq.top().second;
      int dis=pq.top().first;
      pq.pop();
      for(auto it:adj[node]){
           if(dist[it.first]>dis+it.second){
              dist[it.first]=dis+it.second;
              pq.push({dis+it.second,it.first});
           }
      }
   }
return dist;

}
