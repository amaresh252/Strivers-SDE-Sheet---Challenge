
void add(vector<vector<int>> &board,vector<vector<int>> &ans,int n){
  vector<int> temp;
  for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
      temp.push_back(board[i][j]);
    }
  }
  ans.push_back(temp);
}
void solve(int col,vector<vector<int>> &board,vector<vector<int>> &ans,int n, vector<int> &hashrow,vector<int> &upperdiagonal,vector<int> &lowerdiagonal){
   if(col==n){
     add(board,ans,n);
   }
  for(int row=0;row<n;row++){
    if(hashrow[row]==0 && upperdiagonal[row+col]==0 && lowerdiagonal[n-1+col-row]==0){
      board[row][col]=1;
      hashrow[row]=1;
      upperdiagonal[row+col]=1;
      lowerdiagonal[n-1+col-row]=1;
      solve(col+1,board,ans,n,hashrow,upperdiagonal,lowerdiagonal);
      board[row][col]=0;
      hashrow[row]=0;
      upperdiagonal[row+col]=0;
      lowerdiagonal[n-1+col-row]=0;
    }
  }
    
}

vector<vector<int>> solveNQueens(int n) {
    vector<vector<int>> ans;
    vector<int> hashrow(n,0),upperdiagonal(2*n-1,0),lowerdiagonal(2*n-1,0);
    vector<vector<int>> board(n,vector<int> (n,0));
    solve(0,board,ans,n,hashrow,upperdiagonal,lowerdiagonal);
    return ans;

}
